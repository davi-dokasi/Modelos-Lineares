depreciation <- read_csv("auto-market-dataset/depreciation.csv")
applications <- read_csv("auto-market-dataset/applications.csv")
primary      <- read_csv("auto-market-dataset/primary_features.csv")
models       <- read_csv("auto-market-dataset/models.csv")
extra        <- read_csv("auto-market-dataset/extra_options.csv")
mans         <- read_csv("auto-market-dataset/mans.csv")
# Juntando as tabelas pelas chaves
data <- price %>%
inner_join(extra,        by = "app_id")             %>%
inner_join(depreciation, by = "app_id")             %>%
inner_join(applications, by = "app_id")             %>%
inner_join(primary,      by = "app_id")             %>%
inner_join(mans,         by = c("man_id"   = "id")) %>%
inner_join(models,       by = c("model_id" = "id")) %>%
select(-ends_with(".y"))                            %>%
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
data <- data %>%
filter(is_car == TRUE)
data <- data %>%
select(app_id,
price,
car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
esd,
el_windows,
conditioner,
leather,
nav_system,
model_name,
category,
man_id,
man_name, )
data <- data %>%
mutate(category_num = as.numeric(as.factor(data$category)))
# Retirando registros inconsistentes
data_filter <- data %>%
filter(price         > 1000 &
car_run_km    > 1000 &
engine_volume > 0    &
cylinders     > 0)
model <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model)
summary(model_filter)
summary(model_log)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_filter)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_log)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_filter)
View(data_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ nav_system
+ man_id, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ nav_system, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ nav_system, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
summary(model_filter)
# Gráficos de dispersão com linha de regressão ajustada
ggplot(data, aes(x = car_run_km, y = price)) +
geom_point() +
geom_smooth(method = "lm", col = "blue") +
labs(title = "Relação entre Quilometragem e Preço", x = "Quilometragem (km)", y = "Preço")
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ category_num
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ man_id
+ category_num, data = data_filter)
summary(model_log)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
summary(model_log)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system
+ category_num, data = data_filter)
summary(model_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ esd
+ el_windows
+ conditioner
+ leather
+ nav_system, data = data_filter)
summary(model_filter)
packages <- c("readr",
"dplyr",
"ggplot2",
"corrplot",
"GGally",
"knitr",
"png",
"rmarkdown",
"pastecs",
"RColorBrewer",
"gridExtra",
"car")
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
lapply(packages, install_if_missing)
lapply(packages, library, character.only = TRUE)
# Cálculo do VIF
vif_values <- vif(model_filter)
vif_values
corrplot(cor(dados), method="number", order="hclust", addrect=2, diag=F)
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
packages <- c("readr",
"dplyr",
"ggplot2",
"corrplot",
"GGally",
"knitr",
"png",
"rmarkdown",
"pastecs",
"RColorBrewer",
"gridExtra",
"car",
"corrplot")
install_if_missing <- function(pkg) {
if (!requireNamespace(pkg, quietly = TRUE)) {
install.packages(pkg)
}
}
lapply(packages, install_if_missing)
lapply(packages, library, character.only = TRUE)
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
data_filter <- data_filter %>%
select(car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
nav_system)
# Cálculo do VIF
vif_values <- vif(model_filter)
vif_values
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
kable(vif_values)
kable(vif_values, col.names = c("VIF"))
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
# Cálculo do VIF
vif_values <- vif(data_filter)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
price        <- read_csv("auto-market-dataset/price.csv")
depreciation <- read_csv("auto-market-dataset/depreciation.csv")
applications <- read_csv("auto-market-dataset/applications.csv")
primary      <- read_csv("auto-market-dataset/primary_features.csv")
models       <- read_csv("auto-market-dataset/models.csv")
extra        <- read_csv("auto-market-dataset/extra_options.csv")
mans         <- read_csv("auto-market-dataset/mans.csv")
# Juntando as tabelas pelas chaves
data <- price %>%
inner_join(extra,        by = "app_id")             %>%
inner_join(depreciation, by = "app_id")             %>%
inner_join(applications, by = "app_id")             %>%
inner_join(primary,      by = "app_id")             %>%
inner_join(mans,         by = c("man_id"   = "id")) %>%
inner_join(models,       by = c("model_id" = "id")) %>%
select(-ends_with(".y"))                            %>%
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
data <- data %>%
filter(is_car == TRUE)
data <- data %>%
select(app_id,
price,
car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
esd,
el_windows,
conditioner,
leather,
nav_system,
model_name,
category,
man_id,
man_name, )
data <- data %>%
mutate(category_num = as.numeric(as.factor(data$category)))
# Retirando registros inconsistentes
data_filter <- data %>%
filter(price         > 1000 &
car_run_km    > 1000 &
engine_volume > 0    &
cylinders     > 0)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
summary(model_filter)
data_filter <- data_filter %>%
select(price,
car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
nav_system)
# Cálculo do VIF
vif_values <- vif(model_filter)
kable(vif_values, col.names = c("VIF"))
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ airbags
, data = data_filter)
summary(model_log)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ engine_volume
+ cylinders
+ airbags
+ abs_break
+ nav_system, data = data_filter)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ cylinders
+ airbags
+ abs_break,
data = data_filter)
summary(model_log)
data_filter <- data_filter %>%
select(price,
car_run_km,
prod_year,
cylinders,
airbags,
abs_break)
# Cálculo do VIF
vif_values <- vif(model_filter)
kable(vif_values, col.names = c("VIF"))
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
data_filter <- data_filter %>%
select(price,
car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
nav_system)
model_filter <- lm(price ~ car_run_km
+ prod_year
+ cylinders
+ airbags
+ abs_break, data = data_filter)
# Cálculo do VIF
vif_values <- vif(model_filter)
kable(vif_values, col.names = c("VIF"))
corrplot(cor(data_filter), method="number", order="hclust", addrect=2, diag=F)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ cylinders
+ airbags
+ abs_break + nav_system,
data = data_filter)
price        <- read_csv("auto-market-dataset/price.csv")
depreciation <- read_csv("auto-market-dataset/depreciation.csv")
applications <- read_csv("auto-market-dataset/applications.csv")
primary      <- read_csv("auto-market-dataset/primary_features.csv")
models       <- read_csv("auto-market-dataset/models.csv")
extra        <- read_csv("auto-market-dataset/extra_options.csv")
mans         <- read_csv("auto-market-dataset/mans.csv")
# Juntando as tabelas pelas chaves
data <- price %>%
inner_join(extra,        by = "app_id")             %>%
inner_join(depreciation, by = "app_id")             %>%
inner_join(applications, by = "app_id")             %>%
inner_join(primary,      by = "app_id")             %>%
inner_join(mans,         by = c("man_id"   = "id")) %>%
inner_join(models,       by = c("model_id" = "id")) %>%
select(-ends_with(".y"))                            %>%
rename_with(~ sub("\\.x$", "", .), ends_with(".x"))
data <- data %>%
filter(is_car == TRUE)
data <- data %>%
select(app_id,
price,
car_run_km,
prod_year,
engine_volume,
cylinders,
airbags,
abs_break,
esd,
el_windows,
conditioner,
leather,
nav_system,
model_name,
category,
man_id,
man_name, )
data <- data %>%
mutate(category_num = as.numeric(as.factor(data$category)))
# Retirando registros inconsistentes
data_filter <- data %>%
filter(price         > 1000 &
car_run_km    > 1000 &
engine_volume > 0    &
cylinders     > 0)
model_log <- lm(log(price) ~ car_run_km
+ prod_year
+ cylinders
+ airbags
+ abs_break + nav_system,
data = data_filter)
summary(model_log)
